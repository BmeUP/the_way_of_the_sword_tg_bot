---
x-backend: &backend
  build:
    context: ../../
    dockerfile: ci/docker/python/Dockerfile
    args:
      PIP_ENVIRONMENT: "production"
      RUNNER: "production"
  volumes:
    - "../../app:/var/app"
  env_file:
    - .env
  depends_on:
    the_way_of_the_sword-mq:
      condition: service_healthy

services:
  the_way_of_the_sword-backend:
    container_name: the_way_of_the_sword-backend
    <<: *backend
    command: /start-app


  the_way_of_the_sword-db:
    container_name: the_way_of_the_sword-db
    image: postgres:15.3-alpine
    shm_size: 1g
    env_file:
    - .env
    expose:
    - 5432
    volumes:
    - "db_data:/var/lib/postgresql/data"
    command: ["postgres", "-c", "max_connections=1000"]
    healthcheck:
      interval: 10s
      timeout: 5s
      retries: 5

  the_way_of_the_sword-mq:
    container_name: the_way_of_the_sword-mq
    image: rabbitmq:4.0.4-management-alpine
    env_file:
      - .env
    expose:
    - 5672
    - 15672
    volumes:
    - "mq_data:/var/lib/rabbitmq"
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q ping"]
      interval: 3s
      timeout: 3s
      retries: 30

  the_way_of_the_sword-taskiq-worker:
    container_name: the_way_of_the_sword-taskiq-worker
    <<: *backend
    command: taskiq worker tiq:broker -fsd

  the_way_of_the_sword-taskiq-scheduler:
    container_name: the_way_of_the_sword-taskiq-scheduler
    <<: *backend
    command: taskiq scheduler tiq:scheduler -fsd

volumes:
  db_data: {}
  mq_data: {}
